{"ast":null,"code":"// cardUtils.js\nimport { cards } from \"../includes/cards\";\nconst suits = [\"h\", \"d\", \"c\", \"s\"];\n\n/**\r\n * Функция перемешивания карт в массиве\r\n * @param {Array} deck - массив карт\r\n * @returns {Array} - перемешанный массив карт\r\n */\nexport const shuffleDeck = deck => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\r\n * Функция выбора случайных карт из массива\r\n * @param {Array} deck - массив карт\r\n * @param {number} count - количество карт для выбора\r\n * @returns {Array} - массив случайных карт\r\n */\nexport const getRandomCards = (deck, numCards) => {\n  const selectedCards = [];\n  const deckCopy = [...deck]; // Create a copy of the deck to avoid modifying the original\n\n  for (let i = 0; i < numCards; i++) {\n    if (deckCopy.length === 0) {\n      // If no cards are left in the deck, return the selected cards\n      break;\n    }\n    const randomIndex = Math.floor(Math.random() * deckCopy.length);\n    selectedCards.push(deckCopy[randomIndex]);\n    deckCopy.splice(randomIndex, 1); // Remove the selected card from the copy\n  }\n  return selectedCards;\n};\n\n// Находит карту в DOM по идентификатору.\n// card\nexport const findCardById = id => {\n  const cards = document.querySelectorAll(\".game .game_card\");\n  return Array.from(cards).find(el => el.dataset.id == id);\n};\n// cards\nexport const findCardsById = array => {\n  const cards = document.querySelectorAll(\".game .game_card\");\n  let eArr = [];\n  for (let i = 0; i < array.length; i++) {\n    const el = array[i];\n    eArr.push(findCardById(el.id));\n  }\n  return eArr;\n};\n//\n// open card\nexport const openCard = card => {\n  let name = card.dataset.name[0].toLowerCase();\n  let nominal = card.dataset.nominal[0];\n  card.src = '/static/fullcard/s9.png';\n  card.classList.add(\"open-card\");\n};\n// card to self cards\nexport const cardToSelf = el => {\n  el.classList.add(\"self_card\");\n};","map":{"version":3,"names":["cards","suits","shuffleDeck","deck","i","length","j","Math","floor","random","getRandomCards","numCards","selectedCards","deckCopy","randomIndex","push","splice","findCardById","id","document","querySelectorAll","Array","from","find","el","dataset","findCardsById","array","eArr","openCard","card","name","toLowerCase","nominal","src","classList","add","cardToSelf"],"sources":["C:/Users/smeno/OneDrive/Рабочий стол/dur/src/game/utils/cardUtils.jsx"],"sourcesContent":["\r\n\r\n// cardUtils.js\r\nimport { cards } from \"../includes/cards\";\r\nconst suits = [\"h\", \"d\", \"c\", \"s\"];\r\n\r\n/**\r\n * Функция перемешивания карт в массиве\r\n * @param {Array} deck - массив карт\r\n * @returns {Array} - перемешанный массив карт\r\n */\r\nexport const shuffleDeck = (deck) => {\r\n\tfor (let i = deck.length - 1; i > 0; i--) {\r\n\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t[deck[i], deck[j]] = [deck[j], deck[i]];\r\n\t}\r\n\treturn deck;\r\n};\r\n\r\n/**\r\n * Функция выбора случайных карт из массива\r\n * @param {Array} deck - массив карт\r\n * @param {number} count - количество карт для выбора\r\n * @returns {Array} - массив случайных карт\r\n */\r\nexport const getRandomCards = (deck, numCards) => {\r\n\tconst selectedCards = [];\r\n\tconst deckCopy = [...deck]; // Create a copy of the deck to avoid modifying the original\r\n\r\n\tfor (let i = 0; i < numCards; i++) {\r\n\t\tif (deckCopy.length === 0) {\r\n\t\t\t// If no cards are left in the deck, return the selected cards\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tconst randomIndex = Math.floor(Math.random() * deckCopy.length);\r\n\t\tselectedCards.push(deckCopy[randomIndex]);\r\n\t\tdeckCopy.splice(randomIndex, 1); // Remove the selected card from the copy\r\n\t}\r\n\r\n\treturn selectedCards;\r\n};\r\n\r\n// Находит карту в DOM по идентификатору.\r\n// card\r\nexport const findCardById = (id) => {\r\n\tconst cards = document.querySelectorAll(\".game .game_card\");\r\n\treturn Array.from(cards).find((el) => el.dataset.id == id);\r\n};\r\n// cards\r\nexport const findCardsById = (array) => {\r\n\tconst cards = document.querySelectorAll(\".game .game_card\");\r\n\tlet eArr = [];\r\n\tfor (let i = 0; i < array.length; i++) {\r\n\t\tconst el = array[i];\r\n\t\teArr.push(findCardById(el.id));\r\n\t}\r\n\treturn eArr;\r\n};\r\n//\r\n// open card\r\nexport const openCard = (card) => {\r\n\tlet name = card.dataset.name[0].toLowerCase();\r\n\tlet nominal = card.dataset.nominal[0];\r\n\r\n\tcard.src = '/static/fullcard/s9.png'\r\n\tcard.classList.add(\"open-card\");\r\n};\r\n// card to self cards\r\nexport const cardToSelf = (el) => {\r\n\tel.classList.add(\"self_card\");\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}