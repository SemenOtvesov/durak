{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smeno\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\dur\\\\src\\\\game\\\\components\\\\gameMain.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport axios from 'axios';\nimport config from \"../../config\";\nimport GameCard from '../res/components/gameCard.jsx';\nimport PlayerButtons from \"./playerButtons.tsx\";\nimport Emoji from \"./emoji.tsx\";\nimport Cards from \"./cards.tsx\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GameMain({\n  game\n}) {\n  _s();\n  var _game$deck;\n  const cardRefs = useState([]);\n  useEffect(() => {\n    if (game) {\n      const body = {\n        gameId: game.gameId\n      };\n      axios.post(`${config.url}/game/start-game`, body, {\n        headers: {\n          \"Access-Control-Expose-Headers\": \"X-Session\",\n          \"X-Session\": localStorage.getItem(\"session_key\")\n        }\n      }).then(res => {\n        console.log(res);\n        // setGame((prevGame) => ({\n        // \t...prevGame,\n        // \tstatus: \"start\",\n        // }));\n        // localStorage.setItem(\"game_status\", JSON.stringify(res.data));\n        // localStorage.setItem(\"session_key\", res.headers.get(\"X-Session\"));\n        // setFullGameDeck(res.data);\n      }).catch(err => {\n        console.log(err);\n        // localStorage.setItem(\n        // \t\"session_key\",\n        // \terr.response.headers.get(\"X-Session\")\n        // );\n      });\n    }\n  }, [game]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [(game === null || game === void 0 ? void 0 : game.status) !== \"await\" && (game === null || game === void 0 ? void 0 : game.status) !== \"load\" && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"change_card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 62\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"enemy_card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 3\n    }, this), (_game$deck = game.deck) === null || _game$deck === void 0 ? void 0 : _game$deck.map((card, index) => /*#__PURE__*/_jsxDEV(GameCard, {\n      ref: el => cardRefs.current[index] = el,\n      style: {\n        zIndex: game.deck.length - index\n      },\n      id: card.id,\n      type: card.type,\n      name: card.name,\n      value: card.value\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this)), /*#__PURE__*/_jsxDEV(Cards, {\n      game: game\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(PlayerButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Emoji, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n_s(GameMain, \"RwV0cJ+9yqzje9dqNTz4SM5dTW4=\");\n_c = GameMain;\nexport default GameMain;\nvar _c;\n$RefreshReg$(_c, \"GameMain\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","config","GameCard","PlayerButtons","Emoji","Cards","jsxDEV","_jsxDEV","Fragment","_Fragment","GameMain","game","_s","_game$deck","cardRefs","body","gameId","post","url","headers","localStorage","getItem","then","res","console","log","catch","err","children","status","className","fileName","_jsxFileName","lineNumber","columnNumber","deck","map","card","index","ref","el","current","style","zIndex","length","id","type","name","value","_c","$RefreshReg$"],"sources":["C:/Users/smeno/OneDrive/Рабочий стол/dur/src/game/components/gameMain.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport axios from 'axios'\r\nimport config from \"../../config\";\r\nimport GameCard from '../res/components/gameCard.jsx'\r\nimport PlayerButtons from \"./playerButtons.tsx\";\r\nimport Emoji from \"./emoji.tsx\";\r\nimport Cards from \"./cards.tsx\";\r\n\r\n\r\nfunction GameMain({ game }) {\r\n\tconst cardRefs = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (game) {\r\n\t\t\tconst body = { gameId: game.gameId }\r\n\t\t\taxios.post(`${config.url}/game/start-game`, body, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Access-Control-Expose-Headers\": \"X-Session\",\r\n\t\t\t\t\t\"X-Session\": localStorage.getItem(\"session_key\"),\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t\t).then((res) => {\r\n\t\t\t\tconsole.log(res)\r\n\t\t\t\t// setGame((prevGame) => ({\r\n\t\t\t\t// \t...prevGame,\r\n\t\t\t\t// \tstatus: \"start\",\r\n\t\t\t\t// }));\r\n\t\t\t\t// localStorage.setItem(\"game_status\", JSON.stringify(res.data));\r\n\t\t\t\t// localStorage.setItem(\"session_key\", res.headers.get(\"X-Session\"));\r\n\t\t\t\t// setFullGameDeck(res.data);\r\n\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t\t// localStorage.setItem(\r\n\t\t\t\t\t// \t\"session_key\",\r\n\t\t\t\t\t// \terr.response.headers.get(\"X-Session\")\r\n\t\t\t\t\t// );\r\n\t\t\t\t});\r\n\t\t}\r\n\t}, [game])\r\n\r\n\treturn <>\r\n\t\t{(game?.status !== \"await\" && game?.status !== \"load\") && (<span className=\"change_card\"></span>)}\r\n\t\t<span className=\"enemy_card\"></span>\r\n\r\n\t\t{game.deck?.map((card, index) => (\r\n\t\t\t<GameCard\r\n\t\t\t\tref={(el) => (cardRefs.current[index] = el)}\r\n\t\t\t\tstyle={{ zIndex: game.deck.length - index }}\r\n\t\t\t\tkey={card.id}\r\n\t\t\t\tid={card.id}\r\n\t\t\t\ttype={card.type}\r\n\t\t\t\tname={card.name}\r\n\t\t\t\tvalue={card.value}\r\n\t\t\t></GameCard>\r\n\t\t))}\r\n\r\n\t\t<Cards game={game} />\r\n\t\t<PlayerButtons />\r\n\t\t<Emoji />\r\n\t</>\r\n}\r\nexport default GameMain"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}