{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smeno\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\dur\\\\src\\\\game\\\\components\\\\cards.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cards({\n  game,\n  cardRefs\n}) {\n  _s();\n  const cardBoxRef = useRef(null);\n  useEffect(() => {\n    if (game.players) {\n      const userId = JSON.parse(localStorage.getItem('user') || '').id;\n      const usersCards = [];\n      game.players.forEach(el => {\n        usersCards.push({\n          id: el.id,\n          cards: el.cards\n        });\n      });\n      cardRefs.forEach(el => {\n        const typeCard = el.current.getAttribute('data-name');\n        usersCards.forEach(user => {\n          const userCard = user.cards.find(card => {\n            // card.name == typeCard && el.dataset.nominal == card.nominal\n            console.log(el.current.dataset, card, el);\n          });\n          if (userCard) {\n            userCard.current = el.current;\n          }\n        });\n      });\n      const curr = cardBoxRef.current;\n      if (curr) {\n        const {\n          y,\n          width,\n          height\n        } = curr.getBoundingClientRect();\n        usersCards.forEach(user => {\n          if (user.id == userId) {\n            console.log(user.cards);\n            // animateGetCardsPlayerSelf(\n            // \tuser.cards.map(el=>el.current),\n            // \twidth/2, y+height,\n            // \t1, 0.3, 0\n            // )\n          }\n        });\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player_self\",\n    ref: cardBoxRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n}\n_s(Cards, \"e3wM4wfVlfgaARdFQyYqNvbmWkY=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Cards","game","cardRefs","_s","cardBoxRef","players","userId","JSON","parse","localStorage","getItem","id","usersCards","forEach","el","push","cards","typeCard","current","getAttribute","user","userCard","find","card","console","log","dataset","curr","y","width","height","getBoundingClientRect","className","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/smeno/OneDrive/Рабочий стол/dur/src/game/components/cards.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { animateGetCardsPlayerSelf } from \"../utils/animationUtils\";\r\n\r\nfunction Cards ({game, cardRefs}){\r\n\tconst cardBoxRef = useRef<HTMLDivElement>(null)\r\n\tuseEffect(()=>{\r\n\t\tif(game.players){\r\n\t\t\tconst userId = JSON.parse(localStorage.getItem('user') || '').id\r\n\r\n\t\t\tconst usersCards: Array<any> = []\r\n\t\t\tgame.players.forEach(el=>{\r\n\t\t\t\tusersCards.push({id: el.id, cards: el.cards})\r\n\t\t\t})\r\n\t\t\tcardRefs.forEach(el=>{\r\n\t\t\t\tconst typeCard = el.current.getAttribute('data-name')\r\n\t\t\t\tusersCards.forEach(user=>{\r\n\t\t\t\t\tconst userCard = user.cards.find(card=>{\r\n\t\t\t\t\t\t// card.name == typeCard && el.dataset.nominal == card.nominal\r\n\t\t\t\t\t\tconsole.log(el.current.dataset, card, el)\r\n\t\t\t\t\t})\r\n\t\t\t\t\tif(userCard){userCard.current = el.current}\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tconst curr = cardBoxRef.current\r\n\t\t\tif(curr){\r\n\t\t\t\tconst {y, width, height} = curr.getBoundingClientRect()\r\n\t\t\t\tusersCards.forEach(user=>{\r\n\t\t\t\t\tif(user.id == userId){\r\n\t\t\t\t\t\tconsole.log(user.cards)\r\n\t\t\t\t\t\t// animateGetCardsPlayerSelf(\r\n\t\t\t\t\t\t// \tuser.cards.map(el=>el.current),\r\n\t\t\t\t\t\t// \twidth/2, y+height,\r\n\t\t\t\t\t\t// \t1, 0.3, 0\r\n\t\t\t\t\t\t// )\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t})\r\n\treturn (\r\n\t\t<div className=\"player_self\" ref={cardBoxRef}>\r\n\t\t\t<div className=\"cards\"></div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Cards"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjD,SAASC,KAAKA,CAAE;EAACC,IAAI;EAAEC;AAAQ,CAAC,EAAC;EAAAC,EAAA;EAChC,MAAMC,UAAU,GAAGP,MAAM,CAAiB,IAAI,CAAC;EAC/CD,SAAS,CAAC,MAAI;IACb,IAAGK,IAAI,CAACI,OAAO,EAAC;MACf,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAACC,EAAE;MAEhE,MAAMC,UAAsB,GAAG,EAAE;MACjCX,IAAI,CAACI,OAAO,CAACQ,OAAO,CAACC,EAAE,IAAE;QACxBF,UAAU,CAACG,IAAI,CAAC;UAACJ,EAAE,EAAEG,EAAE,CAACH,EAAE;UAAEK,KAAK,EAAEF,EAAE,CAACE;QAAK,CAAC,CAAC;MAC9C,CAAC,CAAC;MACFd,QAAQ,CAACW,OAAO,CAACC,EAAE,IAAE;QACpB,MAAMG,QAAQ,GAAGH,EAAE,CAACI,OAAO,CAACC,YAAY,CAAC,WAAW,CAAC;QACrDP,UAAU,CAACC,OAAO,CAACO,IAAI,IAAE;UACxB,MAAMC,QAAQ,GAAGD,IAAI,CAACJ,KAAK,CAACM,IAAI,CAACC,IAAI,IAAE;YACtC;YACAC,OAAO,CAACC,GAAG,CAACX,EAAE,CAACI,OAAO,CAACQ,OAAO,EAAEH,IAAI,EAAET,EAAE,CAAC;UAC1C,CAAC,CAAC;UACF,IAAGO,QAAQ,EAAC;YAACA,QAAQ,CAACH,OAAO,GAAGJ,EAAE,CAACI,OAAO;UAAA;QAC3C,CAAC,CAAC;MACH,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAGvB,UAAU,CAACc,OAAO;MAC/B,IAAGS,IAAI,EAAC;QACP,MAAM;UAACC,CAAC;UAAEC,KAAK;UAAEC;QAAM,CAAC,GAAGH,IAAI,CAACI,qBAAqB,CAAC,CAAC;QACvDnB,UAAU,CAACC,OAAO,CAACO,IAAI,IAAE;UACxB,IAAGA,IAAI,CAACT,EAAE,IAAIL,MAAM,EAAC;YACpBkB,OAAO,CAACC,GAAG,CAACL,IAAI,CAACJ,KAAK,CAAC;YACvB;YACA;YACA;YACA;YACA;UACD;QACD,CAAC,CAAC;MACH;IAED;EACD,CAAC,CAAC;EACF,oBACCjB,OAAA;IAAKiC,SAAS,EAAC,aAAa;IAACC,GAAG,EAAE7B,UAAW;IAAA8B,QAAA,eAC5CnC,OAAA;MAAKiC,SAAS,EAAC;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAER;AAACnC,EAAA,CA3CQH,KAAK;AAAAuC,EAAA,GAALvC,KAAK;AA4Cd,eAAeA,KAAK;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}